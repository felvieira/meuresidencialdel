
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://kcbvdcacgbwigefwacrk.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtjYnZkY2FjZ2J3aWdlZndhY3JrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIyMjgzMDQsImV4cCI6MjA1NzgwNDMwNH0.K4xcW6V3X9QROQLekB74NbKg3BaShwgMbanrP3olCYI";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Define our own interface for condominium data
export interface Condominium {
  id?: string;
  matricula: string;
  cnpj?: string;
  cep?: string;
  rua?: string;
  numero?: string;
  complemento?: string;
  bairro?: string;
  cidade?: string;
  estado?: string;
  nomeCondominio?: string;
  
  // Informações Representante Legal
  nomeLegal?: string;
  emailLegal?: string;
  telefoneLegal?: string;
  enderecoLegal?: string;
  
  // Informações Financeiras
  banco?: string;
  agencia?: string;
  conta?: string;
  pix?: string;
  
  // Plano / Contrato
  planoContratado?: string;
  valorPlano?: string;
  formaPagamento?: string;
  vencimento?: string;
  desconto?: string;
  valorMensal?: string;
  
  // Segurança
  senha?: string;
  confirmarSenha?: string;
  
  created_at?: string;
  updated_at?: string;
  welcome_email_sent?: boolean;
}

// Função para enviar e-mail de boas-vindas
export const sendWelcomeEmail = async (condominiumData: Condominium) => {
  try {
    const response = await supabase.functions.invoke('send-welcome-email', {
      body: {
        emailLegal: condominiumData.emailLegal,
        matricula: condominiumData.matricula,
        senha: condominiumData.senha,
        nomeCondominio: condominiumData.nomeCondominio,
        nomelegal: condominiumData.nomeLegal
      }
    });
    
    if (response.error) {
      throw new Error(response.error.message);
    }
    
    return response.data;
  } catch (error) {
    console.error('Erro ao enviar e-mail de boas-vindas:', error);
    throw error;
  }
};

// Function to map our client-side property names to match database column names
const mapToDatabaseColumns = (data: Partial<Condominium>) => {
  // Create a new object with transformed keys that match database column names
  return {
    matricula: data.matricula,
    cnpj: data.cnpj,
    cep: data.cep,
    rua: data.rua,
    numero: data.numero,
    complemento: data.complemento,
    bairro: data.bairro,
    cidade: data.cidade,
    estado: data.estado,
    nomecondominio: data.nomeCondominio,
    nomelegal: data.nomeLegal,
    emaillegal: data.emailLegal,
    telefonelegal: data.telefoneLegal,
    enderecolegal: data.enderecoLegal,
    banco: data.banco,
    agencia: data.agencia,
    conta: data.conta,
    pix: data.pix,
    planocontratado: data.planoContratado,
    valorplano: data.valorPlano,
    formapagamento: data.formaPagamento,
    vencimento: data.vencimento,
    desconto: data.desconto,
    valormensal: data.valorMensal,
    senha: data.senha,
    welcome_email_sent: data.welcome_email_sent
  };
};

// Condominium data functions
export const saveCondominiumData = async (data: Condominium) => {
  console.log("Saving condominium data:", data);
  
  try {
    // Verificar se o condomínio já existe
    const existingCondominium = await getCondominiumByMatricula(data.matricula);
    const isNewCondominium = !existingCondominium;
    
    console.log("Is new condominium:", isNewCondominium);
    
    // Remove confirmarSenha from data and map to database column names
    const { confirmarSenha, ...dataWithoutConfirmar } = data;
    
    // Map our client-side property names to database column names
    const dataToSave = mapToDatabaseColumns({
      ...dataWithoutConfirmar,
      // Se for novo cadastro, define welcome_email_sent como false
      welcome_email_sent: existingCondominium?.welcome_email_sent || false
    });
    
    console.log("Data to save:", dataToSave);
    
    // Use any type to bypass type checking since we know the table exists
    const { data: savedData, error } = await supabase
      .from('condominiums' as any)
      .upsert([dataToSave])
      .select();
    
    if (error) {
      console.error("Error saving to Supabase:", error);
      throw error;
    }
    
    console.log("Saved data:", savedData);
    
    // Use proper type conversion with a null check
    if (!savedData || savedData.length === 0) {
      throw new Error('No data returned from insert operation');
    }

    // Se for um novo condomínio e tiver e-mail, envia e-mail de boas-vindas
    if (isNewCondominium && data.emailLegal) {
      try {
        await sendWelcomeEmail(data);
        
        // Atualiza o flag de e-mail enviado
        await supabase
          .from('condominiums' as any)
          .update({ welcome_email_sent: true })
          .eq('matricula', data.matricula);
          
      } catch (emailError) {
        console.error('Erro ao enviar e-mail de boas-vindas:', emailError);
        // Não interrompe o fluxo principal se o envio de e-mail falhar
      }
    }
    
    // Map the data back to our client-side model
    const result = {
      id: savedData[0].id,
      matricula: savedData[0].matricula,
      cnpj: savedData[0].cnpj,
      cep: savedData[0].cep,
      rua: savedData[0].rua,
      numero: savedData[0].numero,
      complemento: savedData[0].complemento,
      bairro: savedData[0].bairro,
      cidade: savedData[0].cidade,
      estado: savedData[0].estado,
      nomeCondominio: savedData[0].nomecondominio,
      nomeLegal: savedData[0].nomelegal,
      emailLegal: savedData[0].emaillegal,
      telefoneLegal: savedData[0].telefonelegal,
      enderecoLegal: savedData[0].enderecolegal,
      banco: savedData[0].banco,
      agencia: savedData[0].agencia,
      conta: savedData[0].conta,
      pix: savedData[0].pix,
      planoContratado: savedData[0].planocontratado,
      valorPlano: savedData[0].valorplano,
      formaPagamento: savedData[0].formapagamento,
      vencimento: savedData[0].vencimento,
      desconto: savedData[0].desconto,
      valorMensal: savedData[0].valormensal,
      senha: savedData[0].senha,
      created_at: savedData[0].created_at,
      updated_at: savedData[0].updated_at,
      welcome_email_sent: savedData[0].welcome_email_sent
    };
    
    return result;
  } catch (error) {
    console.error("Detailed error in saveCondominiumData:", error);
    throw error;
  }
};

export const getCondominiumByMatricula = async (matricula: string) => {
  try {
    console.log("Fetching condominium by matricula:", matricula);
    
    // Use any type to bypass type checking since we know the table exists
    const { data, error } = await supabase
      .from('condominiums' as any)
      .select('*')
      .eq('matricula', matricula)
      .maybeSingle();
    
    if (error) {
      console.error("Error fetching condominium:", error);
      if (error.code !== 'PGRST116') {
        throw error;
      }
    }
    
    console.log("Fetched condominium data:", data);
    
    // Return null if no data was found instead of trying to cast it
    if (!data) return null;
    
    // Map the data back to our client-side model
    return {
      id: data.id,
      matricula: data.matricula,
      cnpj: data.cnpj,
      cep: data.cep,
      rua: data.rua,
      numero: data.numero,
      complemento: data.complemento,
      bairro: data.bairro,
      cidade: data.cidade,
      estado: data.estado,
      nomeCondominio: data.nomecondominio,
      nomeLegal: data.nomelegal,
      emailLegal: data.emaillegal,
      telefoneLegal: data.telefonelegal,
      enderecoLegal: data.enderecolegal,
      banco: data.banco,
      agencia: data.agencia,
      conta: data.conta,
      pix: data.pix,
      planoContratado: data.planocontratado,
      valorPlano: data.valorplano,
      formaPagamento: data.formapagamento,
      vencimento: data.vencimento,
      desconto: data.desconto,
      valorMensal: data.valormensal,
      senha: data.senha,
      created_at: data.created_at,
      updated_at: data.updated_at,
      welcome_email_sent: data.welcome_email_sent
    };
  } catch (error) {
    console.error("Error in getCondominiumByMatricula:", error);
    throw error;
  }
};
