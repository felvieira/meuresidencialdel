
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://kcbvdcacgbwigefwacrk.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtjYnZkY2FjZ2J3aWdlZndhY3JrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIyMjgzMDQsImV4cCI6MjA1NzgwNDMwNH0.K4xcW6V3X9QROQLekB74NbKg3BaShwgMbanrP3olCYI";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Define our own interface for condominium data
export interface Condominium {
  id?: string;
  matricula: string;
  cnpj?: string;
  cep?: string;
  rua?: string;
  numero?: string;
  complemento?: string;
  bairro?: string;
  cidade?: string;
  estado?: string;
  nomeCondominio?: string;
  
  // Informações Representante Legal
  nomeLegal?: string;
  emailLegal?: string;
  telefoneLegal?: string;
  enderecoLegal?: string;
  
  // Informações Financeiras
  banco?: string;
  agencia?: string;
  conta?: string;
  pix?: string;
  
  // Plano / Contrato
  planoContratado?: string;
  valorPlano?: string;
  formaPagamento?: string;
  vencimento?: string;
  desconto?: string;
  valorMensal?: string;
  
  // Segurança
  senha?: string;
  confirmarSenha?: string;
  
  created_at?: string;
  updated_at?: string;
  welcome_email_sent?: boolean;
}

// Função para enviar e-mail de boas-vindas
export const sendWelcomeEmail = async (condominiumData: Condominium) => {
  try {
    const response = await supabase.functions.invoke('send-welcome-email', {
      body: {
        emailLegal: condominiumData.emailLegal,
        matricula: condominiumData.matricula,
        senha: condominiumData.senha,
        nomeCondominio: condominiumData.nomeCondominio,
        nomelegal: condominiumData.nomeLegal
      }
    });
    
    if (response.error) {
      throw new Error(response.error.message);
    }
    
    return response.data;
  } catch (error) {
    console.error('Erro ao enviar e-mail de boas-vindas:', error);
    throw error;
  }
};

// Function to map our client-side property names to match database column names
const mapToDatabaseColumns = (data: Partial<Condominium>) => {
  // Create a new object with transformed keys that match database column names
  return {
    matricula: data.matricula,
    cnpj: data.cnpj,
    cep: data.cep,
    rua: data.rua,
    numero: data.numero,
    complemento: data.complemento,
    bairro: data.bairro,
    cidade: data.cidade,
    estado: data.estado,
    nomecondominio: data.nomeCondominio,
    nomelegal: data.nomeLegal,
    emaillegal: data.emailLegal,
    telefonelegal: data.telefoneLegal,
    enderecolegal: data.enderecoLegal,
    banco: data.banco,
    agencia: data.agencia,
    conta: data.conta,
    pix: data.pix,
    planocontratado: data.planoContratado,
    valorplano: data.valorPlano,
    formapagamento: data.formaPagamento,
    vencimento: data.vencimento,
    desconto: data.desconto,
    valormensal: data.valorMensal,
    senha: data.senha,
    welcome_email_sent: data.welcome_email_sent
  };
};

// Define database row type to match Supabase schema
type CondominiumRow = {
  id: string;
  matricula: string;
  cnpj?: string | null;
  cep?: string | null;
  rua?: string | null;
  numero?: string | null;
  complemento?: string | null;
  bairro?: string | null;
  cidade?: string | null;
  estado?: string | null;
  nomecondominio?: string | null;
  nomelegal?: string | null;
  emaillegal?: string | null;
  telefonelegal?: string | null;
  enderecolegal?: string | null;
  banco?: string | null;
  agencia?: string | null;
  conta?: string | null;
  pix?: string | null;
  planocontratado?: string | null;
  valorplano?: string | null;
  formapagamento?: string | null;
  vencimento?: string | null;
  desconto?: string | null;
  valormensal?: string | null;
  senha?: string | null;
  created_at?: string | null;
  updated_at?: string | null;
  welcome_email_sent?: boolean | null;
};

// Condominium data functions
export const saveCondominiumData = async (data: Condominium) => {
  console.log("Saving condominium data:", data);
  
  try {
    // Verificar se o condomínio já existe
    const existingCondominium = await getCondominiumByMatricula(data.matricula);
    const isNewCondominium = !existingCondominium;
    
    console.log("Is new condominium:", isNewCondominium);
    
    // Remove confirmarSenha from data and map to database column names
    const { confirmarSenha, ...dataWithoutConfirmar } = data;
    
    // Map our client-side property names to database column names
    const dataToSave = mapToDatabaseColumns({
      ...dataWithoutConfirmar,
      // Se for novo cadastro, define welcome_email_sent como false
      welcome_email_sent: existingCondominium?.welcome_email_sent || false
    });
    
    console.log("Data to save:", dataToSave);
    
    // Use any type to bypass type checking since we know the table exists
    const { data: savedData, error } = await supabase
      .from('condominiums' as any)
      .upsert([dataToSave])
      .select();
    
    if (error) {
      console.error("Error saving to Supabase:", error);
      throw error;
    }
    
    console.log("Saved data:", savedData);
    
    // Ensure we have data before accessing it
    if (!savedData || savedData.length === 0) {
      throw new Error('No data returned from insert operation');
    }

    // Safely cast the data to the correct type
    // First check that we actually have an array with objects
    if (!Array.isArray(savedData)) {
      throw new Error('Expected array of data but got something else');
    }
    
    // Type assertion for the saved data
    const typedSavedData = savedData as unknown as CondominiumRow[];
    
    // Se for um novo condomínio e tiver e-mail, envia e-mail de boas-vindas
    if (isNewCondominium && data.emailLegal) {
      try {
        await sendWelcomeEmail(data);
        
        // Atualiza o flag de e-mail enviado
        await supabase
          .from('condominiums' as any)
          .update({ welcome_email_sent: true })
          .eq('matricula', data.matricula);
          
      } catch (emailError) {
        console.error('Erro ao enviar e-mail de boas-vindas:', emailError);
        // Não interrompe o fluxo principal se o envio de e-mail falhar
      }
    }
    
    // Map the data back to our client-side model
    const result: Condominium = {
      id: typedSavedData[0].id,
      matricula: typedSavedData[0].matricula,
      cnpj: typedSavedData[0].cnpj || undefined,
      cep: typedSavedData[0].cep || undefined,
      rua: typedSavedData[0].rua || undefined,
      numero: typedSavedData[0].numero || undefined,
      complemento: typedSavedData[0].complemento || undefined,
      bairro: typedSavedData[0].bairro || undefined,
      cidade: typedSavedData[0].cidade || undefined,
      estado: typedSavedData[0].estado || undefined,
      nomeCondominio: typedSavedData[0].nomecondominio || undefined,
      nomeLegal: typedSavedData[0].nomelegal || undefined,
      emailLegal: typedSavedData[0].emaillegal || undefined,
      telefoneLegal: typedSavedData[0].telefonelegal || undefined,
      enderecoLegal: typedSavedData[0].enderecolegal || undefined,
      banco: typedSavedData[0].banco || undefined,
      agencia: typedSavedData[0].agencia || undefined,
      conta: typedSavedData[0].conta || undefined,
      pix: typedSavedData[0].pix || undefined,
      planoContratado: typedSavedData[0].planocontratado || undefined,
      valorPlano: typedSavedData[0].valorplano || undefined,
      formaPagamento: typedSavedData[0].formapagamento || undefined,
      vencimento: typedSavedData[0].vencimento || undefined,
      desconto: typedSavedData[0].desconto || undefined,
      valorMensal: typedSavedData[0].valormensal || undefined,
      senha: typedSavedData[0].senha || undefined,
      created_at: typedSavedData[0].created_at || undefined,
      updated_at: typedSavedData[0].updated_at || undefined,
      welcome_email_sent: typedSavedData[0].welcome_email_sent || undefined
    };
    
    return result;
  } catch (error) {
    console.error("Detailed error in saveCondominiumData:", error);
    throw error;
  }
};

export const getCondominiumByMatricula = async (matricula: string) => {
  try {
    console.log("Fetching condominium by matricula:", matricula);
    
    // Adiciona logs para debug
    console.log("Matricula sendo buscada:", matricula);
    console.log("Tipo da matrícula:", typeof matricula);
    console.log("Matrícula é vazia?", !matricula);
    
    if (!matricula || matricula.trim() === '') {
      console.log("Matrícula vazia, retornando null");
      return null;
    }
    
    // Use any type to bypass type checking since we know the table exists
    const { data, error } = await supabase
      .from('condominiums' as any)
      .select('*')
      .eq('matricula', matricula.trim())
      .single();
    
    if (error) {
      // Se o erro for PGRST116 (not found), não é um erro real, apenas não encontrou dados
      if (error.code === 'PGRST116') {
        console.log("Nenhum condomínio encontrado com a matrícula:", matricula);
        return null;
      }
      
      console.error("Error fetching condominium:", error);
      throw error;
    }
    
    console.log("Fetched condominium data:", data);
    
    // Return null if no data was found
    if (!data) {
      console.log("Nenhum dado encontrado para a matrícula:", matricula);
      return null;
    }
    
    // Safely cast the data to the correct type
    const typedData = data as unknown as CondominiumRow;
    
    // Map the data back to our client-side model
    return {
      id: typedData.id,
      matricula: typedData.matricula,
      cnpj: typedData.cnpj || undefined,
      cep: typedData.cep || undefined,
      rua: typedData.rua || undefined,
      numero: typedData.numero || undefined,
      complemento: typedData.complemento || undefined,
      bairro: typedData.bairro || undefined,
      cidade: typedData.cidade || undefined,
      estado: typedData.estado || undefined,
      nomeCondominio: typedData.nomecondominio || undefined,
      nomeLegal: typedData.nomelegal || undefined,
      emailLegal: typedData.emaillegal || undefined,
      telefoneLegal: typedData.telefonelegal || undefined,
      enderecoLegal: typedData.enderecolegal || undefined,
      banco: typedData.banco || undefined,
      agencia: typedData.agencia || undefined,
      conta: typedData.conta || undefined,
      pix: typedData.pix || undefined,
      planoContratado: typedData.planocontratado || undefined,
      valorPlano: typedData.valorplano || undefined,
      formaPagamento: typedData.formapagamento || undefined,
      vencimento: typedData.vencimento || undefined,
      desconto: typedData.desconto || undefined,
      valorMensal: typedData.valormensal || undefined,
      senha: typedData.senha || undefined,
      created_at: typedData.created_at || undefined,
      updated_at: typedData.updated_at || undefined,
      welcome_email_sent: typedData.welcome_email_sent || undefined
    };
  } catch (error) {
    console.error("Error in getCondominiumByMatricula:", error);
    throw error;
  }
};
