
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://kcbvdcacgbwigefwacrk.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtjYnZkY2FjZ2J3aWdlZndhY3JrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIyMjgzMDQsImV4cCI6MjA1NzgwNDMwNH0.K4xcW6V3X9QROQLekB74NbKg3BaShwgMbanrP3olCYI";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Define our own interface for condominium data
export interface Condominium {
  id?: string;
  matricula: string;
  cnpj?: string;
  cep?: string;
  rua?: string;
  numero?: string;
  complemento?: string;
  bairro?: string;
  cidade?: string;
  estado?: string;
  nomeCondominio?: string;
  
  // Informações Representante Legal
  nomeLegal?: string;
  emailLegal?: string;
  telefoneLegal?: string;
  enderecoLegal?: string;
  
  // Informações Financeiras
  banco?: string;
  agencia?: string;
  conta?: string;
  pix?: string;
  
  // Plano / Contrato
  planoContratado?: string;
  valorPlano?: string;
  formaPagamento?: string;
  vencimento?: string;
  desconto?: string;
  valorMensal?: string;
  
  // Segurança
  senha?: string;
  confirmarSenha?: string;
  
  created_at?: string;
  updated_at?: string;
  welcome_email_sent?: boolean;
}

// Função para enviar e-mail de boas-vindas
export const sendWelcomeEmail = async (condominiumData: Condominium) => {
  try {
    const response = await supabase.functions.invoke('send-welcome-email', {
      body: {
        emailLegal: condominiumData.emailLegal,
        matricula: condominiumData.matricula,
        senha: condominiumData.senha,
        nomeCondominio: condominiumData.nomeCondominio,
        nomelegal: condominiumData.nomeLegal
      }
    });
    
    if (response.error) {
      throw new Error(response.error.message);
    }
    
    return response.data;
  } catch (error) {
    console.error('Erro ao enviar e-mail de boas-vindas:', error);
    throw error;
  }
};

// Condominium data functions
export const saveCondominiumData = async (data: Condominium) => {
  // Verificar se o condomínio já existe
  const existingCondominium = await getCondominiumByMatricula(data.matricula);
  const isNewCondominium = !existingCondominium;
  
  // Use any type to bypass type checking since we know the table exists
  const { data: savedData, error } = await supabase
    .from('condominiums' as any)
    .upsert([{
      ...data,
      // Se for novo cadastro, define welcome_email_sent como false
      welcome_email_sent: existingCondominium?.welcome_email_sent || false
    }])
    .select();
  
  if (error) throw error;
  
  // Use proper type conversion with a null check
  if (!savedData || savedData.length === 0) {
    throw new Error('No data returned from insert operation');
  }

  // Se for um novo condomínio e tiver e-mail, envia e-mail de boas-vindas
  if (isNewCondominium && data.emailLegal) {
    try {
      await sendWelcomeEmail(data);
      
      // Atualiza o flag de e-mail enviado
      await supabase
        .from('condominiums' as any)
        .update({ welcome_email_sent: true })
        .eq('matricula', data.matricula);
        
    } catch (emailError) {
      console.error('Erro ao enviar e-mail de boas-vindas:', emailError);
      // Não interrompe o fluxo principal se o envio de e-mail falhar
    }
  }
  
  return savedData[0] as unknown as Condominium;
};

export const getCondominiumByMatricula = async (matricula: string) => {
  // Use any type to bypass type checking since we know the table exists
  const { data, error } = await supabase
    .from('condominiums' as any)
    .select('*')
    .eq('matricula', matricula)
    .maybeSingle();
  
  if (error && error.code !== 'PGRST116') throw error;
  
  // Return null if no data was found instead of trying to cast it
  if (!data) return null;
  
  return data as unknown as Condominium;
};
